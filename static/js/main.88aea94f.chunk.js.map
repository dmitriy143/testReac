{"version":3,"sources":["components/TableRow.js","components/EntyField.js","App.js","reportWebVitals.js","index.js"],"names":["TableRow","rows","delRow","map","row","index","className","name","onClick","id","EntyField","textValue","changeText","changeTextEnter","value","onChange","onKeyDown","type","App","useState","JSON","parse","localStorage","getItem","setRow","useEffect","setItem","stringify","setTextValue","addRow","length","evt","target","e","key","slice","concat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAqBeA,MAlBf,YAAqC,IAAjBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,OAGxB,OACE,mCACGD,EAAKE,KAAI,SAACC,EAAKC,GACd,OACE,qBAAiBC,UAAU,YAA3B,UACE,oBAAIA,UAAU,WAAd,SAA0BF,EAAIG,OAC9B,oBAAID,UAAU,WAAd,SAAyB,wBAAQE,QAAS,kBAAMN,EAAOG,IAA9B,wBAFlBD,EAAIK,UCCRC,MARf,YAAgE,IAA3CC,EAA0C,EAA1CA,UAAWC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,gBAC1C,OACE,mCACE,uBAAOC,MAAOH,EAAWI,SAAUH,EAAYI,UAAWH,EAAiBI,KAAK,Y,MCsEvEC,MAvEf,WAEE,IAeA,EAAuBC,mBAASC,KAAKC,MAAMC,aAAaC,QAAQ,UAfpD,CACV,CACEd,GAAI,EACJF,KAAM,+EAER,CACEE,GAAI,EACJF,KAAM,+EAER,CACEE,GAAI,EACJF,KAAM,iFAIV,mBAAON,EAAP,KAAauB,EAAb,KAEAC,qBAAU,WACRH,aAAaI,QAAQ,OAAQN,KAAKO,UAAU1B,MAC3C,CAACA,IAEJ,MAAkCkB,mBAAS,IAA3C,mBAAOR,EAAP,KAAkBiB,EAAlB,KAmBA,SAASC,IAEPL,EAAO,GAAD,mBACDvB,GADC,CAEJ,CACEQ,GAAIR,EAAKA,EAAK6B,OAAS,GAAGrB,GAAK,EAC/BF,KAAOI,GAAY,iFAGvBiB,EAAa,IAGf,OACE,sBAAKtB,UAAU,MAAf,UACE,sBAAKA,UAAU,UAAf,UACE,cAAC,EAAD,CAAWK,UAAWA,EAAWC,WA/BvC,SAAoBmB,GAClBH,EAAaG,EAAIC,OAAOlB,QA8BqCD,gBA5B/D,SAAyBoB,GACT,UAAVA,EAAEC,KACJL,OA2BE,wBAAQrB,QAAS,kBAAMqB,KAAvB,oBAEF,qBAAKvB,UAAU,gBAAf,SACE,uBAAOA,UAAU,QAAjB,SACE,gCACE,cAAC,EAAD,CAAUL,KAAMA,EAAMC,OA3BhC,SAAgBG,GAEdmB,EAAOvB,EAAKkC,MAAM,EAAG9B,GAAO+B,OAAOnC,EAAKkC,MAAM9B,EAAQ,kBC/B3CgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.88aea94f.chunk.js","sourcesContent":["// import { useState } from 'react';\r\n\r\n\r\nfunction TableRow({ rows, delRow }) {\r\n  // console.log(rows)\r\n\r\n  return (\r\n    <>\r\n      {rows.map((row, index) => {\r\n        return (\r\n          <tr key={row.id} className=\"table-row\">\r\n            <td className=\"table-td\">{row.name}</td>\r\n            <td className=\"table-td\"><button onClick={() => delRow(index)}>delete</button></td>\r\n          </tr>\r\n        )\r\n      })}\r\n    </ >\r\n\r\n  )\r\n}\r\n\r\nexport default TableRow;\r\n","// import React from 'react';\r\n\r\n\r\nfunction EntyField({ textValue, changeText, changeTextEnter }) {\r\n  return (\r\n    <>\r\n      <input value={textValue} onChange={changeText} onKeyDown={changeTextEnter} type=\"text\" />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EntyField;","import { useState, useEffect } from 'react';\nimport TableRow from './components/TableRow';\nimport EntyField from './components/EntyField';\nimport './App.css';\n\nfunction App() {\n\n  let state = [\n    {\n      id: 1,\n      name: 'какой-то текст1'\n    },\n    {\n      id: 2,\n      name: 'какой-то текст2'\n    },\n    {\n      id: 3,\n      name: 'какой-то текст3'\n    }\n  ]\n\n  const [rows, setRow] = useState(JSON.parse(localStorage.getItem('rows')) || state)\n\n  useEffect(() => {\n    localStorage.setItem('rows', JSON.stringify(rows));\n  }, [rows])\n\n  const [textValue, setTextValue] = useState('')\n\n  // изменяем textValue (событие)\n  function changeText(evt) {\n    setTextValue(evt.target.value)\n  }\n  function changeTextEnter(e) {\n    if (e.key === 'Enter') {\n      addRow()\n    }\n  }\n\n  // удалям tr\n  function delRow(index) {\n    // устанавливаем новое значение rows, обрезаем rows до index-са и прибавляем оставшуюся часть массива(rows) - вырезаем элемент\n    setRow(rows.slice(0, index).concat(rows.slice(index + 1)));\n  }\n\n  // добавляем tr\n  function addRow() {\n    // добавляем к rows еще один объект\n    setRow([\n      ...rows,\n      {\n        id: rows[rows.length - 1].id + 1,\n        name: !textValue ? 'какой-то текст' : textValue\n      }]\n    );\n    setTextValue('')\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"control\">\n        <EntyField textValue={textValue} changeText={changeText} changeTextEnter={changeTextEnter} />\n        <button onClick={() => addRow()}>add</button>\n      </div>\n      <div className=\"table-wrapper\">\n        <table className=\"table\">\n          <tbody>\n            <TableRow rows={rows} delRow={delRow} />\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}